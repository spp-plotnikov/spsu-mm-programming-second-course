//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientFilters.Filtering {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Filtering.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/get_SizeOfResult", ReplyAction="http://tempuri.org/IService/get_SizeOfResultResponse")]
        long get_SizeOfResult();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/get_SizeOfResult", ReplyAction="http://tempuri.org/IService/get_SizeOfResultResponse")]
        System.Threading.Tasks.Task<long> get_SizeOfResultAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/set_SizeOfSrcArray", ReplyAction="http://tempuri.org/IService/set_SizeOfSrcArrayResponse")]
        void set_SizeOfSrcArray(long value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/set_SizeOfSrcArray", ReplyAction="http://tempuri.org/IService/set_SizeOfSrcArrayResponse")]
        System.Threading.Tasks.Task set_SizeOfSrcArrayAsync(long value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Cancel", ReplyAction="http://tempuri.org/IService/CancelResponse")]
        void Cancel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Cancel", ReplyAction="http://tempuri.org/IService/CancelResponse")]
        System.Threading.Tasks.Task CancelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Filters", ReplyAction="http://tempuri.org/IService/FiltersResponse")]
        string[] Filters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Filters", ReplyAction="http://tempuri.org/IService/FiltersResponse")]
        System.Threading.Tasks.Task<string[]> FiltersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProgress", ReplyAction="http://tempuri.org/IService/GetProgressResponse")]
        int GetProgress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProgress", ReplyAction="http://tempuri.org/IService/GetProgressResponse")]
        System.Threading.Tasks.Task<int> GetProgressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetFilter", ReplyAction="http://tempuri.org/IService/SetFilterResponse")]
        void SetFilter(string filterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetFilter", ReplyAction="http://tempuri.org/IService/SetFilterResponse")]
        System.Threading.Tasks.Task SetFilterAsync(string filterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoFilter", ReplyAction="http://tempuri.org/IService/DoFilterResponse")]
        void DoFilter();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoFilter", ReplyAction="http://tempuri.org/IService/DoFilterResponse")]
        System.Threading.Tasks.Task DoFilterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendChunk", ReplyAction="http://tempuri.org/IService/SendChunkResponse")]
        byte[] SendChunk();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendChunk", ReplyAction="http://tempuri.org/IService/SendChunkResponse")]
        System.Threading.Tasks.Task<byte[]> SendChunkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveChunk", ReplyAction="http://tempuri.org/IService/ReceiveChunkResponse")]
        bool ReceiveChunk(byte[] chunk, long fstBytePosition, long sizeOfChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ReceiveChunk", ReplyAction="http://tempuri.org/IService/ReceiveChunkResponse")]
        System.Threading.Tasks.Task<bool> ReceiveChunkAsync(byte[] chunk, long fstBytePosition, long sizeOfChunk);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ClientFilters.Filtering.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ClientFilters.Filtering.IService>, ClientFilters.Filtering.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long get_SizeOfResult() {
            return base.Channel.get_SizeOfResult();
        }
        
        public System.Threading.Tasks.Task<long> get_SizeOfResultAsync() {
            return base.Channel.get_SizeOfResultAsync();
        }
        
        public void set_SizeOfSrcArray(long value) {
            base.Channel.set_SizeOfSrcArray(value);
        }
        
        public System.Threading.Tasks.Task set_SizeOfSrcArrayAsync(long value) {
            return base.Channel.set_SizeOfSrcArrayAsync(value);
        }
        
        public void Cancel() {
            base.Channel.Cancel();
        }
        
        public System.Threading.Tasks.Task CancelAsync() {
            return base.Channel.CancelAsync();
        }
        
        public string[] Filters() {
            return base.Channel.Filters();
        }
        
        public System.Threading.Tasks.Task<string[]> FiltersAsync() {
            return base.Channel.FiltersAsync();
        }
        
        public int GetProgress() {
            return base.Channel.GetProgress();
        }
        
        public System.Threading.Tasks.Task<int> GetProgressAsync() {
            return base.Channel.GetProgressAsync();
        }
        
        public void SetFilter(string filterName) {
            base.Channel.SetFilter(filterName);
        }
        
        public System.Threading.Tasks.Task SetFilterAsync(string filterName) {
            return base.Channel.SetFilterAsync(filterName);
        }
        
        public void DoFilter() {
            base.Channel.DoFilter();
        }
        
        public System.Threading.Tasks.Task DoFilterAsync() {
            return base.Channel.DoFilterAsync();
        }
        
        public byte[] SendChunk() {
            return base.Channel.SendChunk();
        }
        
        public System.Threading.Tasks.Task<byte[]> SendChunkAsync() {
            return base.Channel.SendChunkAsync();
        }
        
        public bool ReceiveChunk(byte[] chunk, long fstBytePosition, long sizeOfChunk) {
            return base.Channel.ReceiveChunk(chunk, fstBytePosition, sizeOfChunk);
        }
        
        public System.Threading.Tasks.Task<bool> ReceiveChunkAsync(byte[] chunk, long fstBytePosition, long sizeOfChunk) {
            return base.Channel.ReceiveChunkAsync(chunk, fstBytePosition, sizeOfChunk);
        }
    }
}
