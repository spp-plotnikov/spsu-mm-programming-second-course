//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientFilters.Filtering {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Filtering.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/get_SizeOfResult", ReplyAction="http://tempuri.org/IService/get_SizeOfResultResponse")]
        long get_SizeOfResult();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/get_SizeOfResult", ReplyAction="http://tempuri.org/IService/get_SizeOfResultResponse")]
        System.Threading.Tasks.Task<long> get_SizeOfResultAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Filters", ReplyAction="http://tempuri.org/IService/FiltersResponse")]
        string[] Filters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Filters", ReplyAction="http://tempuri.org/IService/FiltersResponse")]
        System.Threading.Tasks.Task<string[]> FiltersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProgress", ReplyAction="http://tempuri.org/IService/GetProgressResponse")]
        int GetProgress();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProgress", ReplyAction="http://tempuri.org/IService/GetProgressResponse")]
        System.Threading.Tasks.Task<int> GetProgressAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetFilter", ReplyAction="http://tempuri.org/IService/SetFilterResponse")]
        void SetFilter(string filterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetFilter", ReplyAction="http://tempuri.org/IService/SetFilterResponse")]
        System.Threading.Tasks.Task SetFilterAsync(string filterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoFilter", ReplyAction="http://tempuri.org/IService/DoFilterResponse")]
        void DoFilter();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/DoFilter", ReplyAction="http://tempuri.org/IService/DoFilterResponse")]
        System.Threading.Tasks.Task DoFilterAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendChunk", ReplyAction="http://tempuri.org/IService/SendChunkResponse")]
        bool SendChunk(byte[] chunk, long fstBytePosition, long sizeOfChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendChunk", ReplyAction="http://tempuri.org/IService/SendChunkResponse")]
        System.Threading.Tasks.Task<bool> SendChunkAsync(byte[] chunk, long fstBytePosition, long sizeOfChunk);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetByteArray", ReplyAction="http://tempuri.org/IService/SetByteArrayResponse")]
        void SetByteArray(long arrayLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SetByteArray", ReplyAction="http://tempuri.org/IService/SetByteArrayResponse")]
        System.Threading.Tasks.Task SetByteArrayAsync(long arrayLength);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChunk", ReplyAction="http://tempuri.org/IService/GetChunkResponse")]
        byte[] GetChunk();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetChunk", ReplyAction="http://tempuri.org/IService/GetChunkResponse")]
        System.Threading.Tasks.Task<byte[]> GetChunkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetResultBitmap", ReplyAction="http://tempuri.org/IService/GetResultBitmapResponse")]
        System.Drawing.Bitmap GetResultBitmap();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetResultBitmap", ReplyAction="http://tempuri.org/IService/GetResultBitmapResponse")]
        System.Threading.Tasks.Task<System.Drawing.Bitmap> GetResultBitmapAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : ClientFilters.Filtering.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ClientFilters.Filtering.IService>, ClientFilters.Filtering.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public long get_SizeOfResult() {
            return base.Channel.get_SizeOfResult();
        }
        
        public System.Threading.Tasks.Task<long> get_SizeOfResultAsync() {
            return base.Channel.get_SizeOfResultAsync();
        }
        
        public string[] Filters() {
            return base.Channel.Filters();
        }
        
        public System.Threading.Tasks.Task<string[]> FiltersAsync() {
            return base.Channel.FiltersAsync();
        }
        
        public int GetProgress() {
            return base.Channel.GetProgress();
        }
        
        public System.Threading.Tasks.Task<int> GetProgressAsync() {
            return base.Channel.GetProgressAsync();
        }
        
        public void SetFilter(string filterName) {
            base.Channel.SetFilter(filterName);
        }
        
        public System.Threading.Tasks.Task SetFilterAsync(string filterName) {
            return base.Channel.SetFilterAsync(filterName);
        }
        
        public void DoFilter() {
            base.Channel.DoFilter();
        }
        
        public System.Threading.Tasks.Task DoFilterAsync() {
            return base.Channel.DoFilterAsync();
        }
        
        public bool SendChunk(byte[] chunk, long fstBytePosition, long sizeOfChunk) {
            return base.Channel.SendChunk(chunk, fstBytePosition, sizeOfChunk);
        }
        
        public System.Threading.Tasks.Task<bool> SendChunkAsync(byte[] chunk, long fstBytePosition, long sizeOfChunk) {
            return base.Channel.SendChunkAsync(chunk, fstBytePosition, sizeOfChunk);
        }
        
        public void SetByteArray(long arrayLength) {
            base.Channel.SetByteArray(arrayLength);
        }
        
        public System.Threading.Tasks.Task SetByteArrayAsync(long arrayLength) {
            return base.Channel.SetByteArrayAsync(arrayLength);
        }
        
        public byte[] GetChunk() {
            return base.Channel.GetChunk();
        }
        
        public System.Threading.Tasks.Task<byte[]> GetChunkAsync() {
            return base.Channel.GetChunkAsync();
        }
        
        public System.Drawing.Bitmap GetResultBitmap() {
            return base.Channel.GetResultBitmap();
        }
        
        public System.Threading.Tasks.Task<System.Drawing.Bitmap> GetResultBitmapAsync() {
            return base.Channel.GetResultBitmapAsync();
        }
    }
}
