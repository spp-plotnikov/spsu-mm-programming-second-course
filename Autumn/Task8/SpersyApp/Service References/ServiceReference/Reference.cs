//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpersyApp.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", CallbackContract=typeof(SpersyApp.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFilterNames", ReplyAction="http://tempuri.org/IService/GetFilterNamesResponse")]
        string[] GetFilterNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFilterNames", ReplyAction="http://tempuri.org/IService/GetFilterNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetFilterNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ProceedImage", ReplyAction="http://tempuri.org/IService/ProceedImageResponse")]
        void ProceedImage(byte[] bytes, string filterType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/ProceedImage", ReplyAction="http://tempuri.org/IService/ProceedImageResponse")]
        System.Threading.Tasks.Task ProceedImageAsync(byte[] bytes, string filterType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CancelProceeding", ReplyAction="http://tempuri.org/IService/CancelProceedingResponse")]
        void CancelProceeding();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CancelProceeding", ReplyAction="http://tempuri.org/IService/CancelProceedingResponse")]
        System.Threading.Tasks.Task CancelProceedingAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProgress", ReplyAction="http://tempuri.org/IService/GetProgressResponse")]
        void GetProgress(int percents);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetImage", ReplyAction="http://tempuri.org/IService/GetImageResponse")]
        void GetImage(byte[] image);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : SpersyApp.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<SpersyApp.ServiceReference.IService>, SpersyApp.ServiceReference.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] GetFilterNames() {
            return base.Channel.GetFilterNames();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFilterNamesAsync() {
            return base.Channel.GetFilterNamesAsync();
        }
        
        public void ProceedImage(byte[] bytes, string filterType) {
            base.Channel.ProceedImage(bytes, filterType);
        }
        
        public System.Threading.Tasks.Task ProceedImageAsync(byte[] bytes, string filterType) {
            return base.Channel.ProceedImageAsync(bytes, filterType);
        }
        
        public void CancelProceeding() {
            base.Channel.CancelProceeding();
        }
        
        public System.Threading.Tasks.Task CancelProceedingAsync() {
            return base.Channel.CancelProceedingAsync();
        }
    }
}
