//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IService", CallbackContract=typeof(Client.ServiceReference.IServiceCallback))]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFilters", ReplyAction="http://tempuri.org/IService/GetFiltersResponse")]
        string[] GetFilters();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetFilters", ReplyAction="http://tempuri.org/IService/GetFiltersResponse")]
        System.Threading.Tasks.Task<string[]> GetFiltersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendImage", ReplyAction="http://tempuri.org/IService/SendImageResponse")]
        void SendImage(byte[] image, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendImage", ReplyAction="http://tempuri.org/IService/SendImageResponse")]
        System.Threading.Tasks.Task SendImageAsync(byte[] image, string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendCancel", ReplyAction="http://tempuri.org/IService/SendCancelResponse")]
        void SendCancel(bool cancel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/SendCancel", ReplyAction="http://tempuri.org/IService/SendCancelResponse")]
        System.Threading.Tasks.Task SendCancelAsync(bool cancel);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetProgress", ReplyAction="http://tempuri.org/IService/GetProgressResponse")]
        void GetProgress(int progress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetImage", ReplyAction="http://tempuri.org/IService/GetImageResponse")]
        void GetImage(byte[] image);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceReference.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.DuplexClientBase<Client.ServiceReference.IService>, Client.ServiceReference.IService {
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public string[] GetFilters() {
            return base.Channel.GetFilters();
        }
        
        public System.Threading.Tasks.Task<string[]> GetFiltersAsync() {
            return base.Channel.GetFiltersAsync();
        }
        
        public void SendImage(byte[] image, string filter) {
            base.Channel.SendImage(image, filter);
        }
        
        public System.Threading.Tasks.Task SendImageAsync(byte[] image, string filter) {
            return base.Channel.SendImageAsync(image, filter);
        }
        
        public void SendCancel(bool cancel) {
            base.Channel.SendCancel(cancel);
        }
        
        public System.Threading.Tasks.Task SendCancelAsync(bool cancel) {
            return base.Channel.SendCancelAsync(cancel);
        }
    }
}
